package frc.robot.subsystems;

import edu.wpi.first.vision.VisionPipeline;

import org.opencv.core.*;
import org.opencv.imgproc.*;

/**
 * GripPipeline class.
 *
 * <p>
 * An OpenCV pipeline generated by GRIP.
 *
 * @author GRIP
 */
public class GripPipeline implements VisionPipeline {

  // Outputs
  private Mat resizeImageOutput = new Mat();
  private Mat blurOutput = new Mat();
  private Mat hsvThresholdOutput = new Mat();
  private Mat maskOutput = new Mat();

  static {
    System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
  }

  /**
   * This is the primary method that runs the entire pipeline and updates the
   * outputs.
   */
  @Override
  public void process(Mat source0) {
    // Step Resize_Image0:
    // Mat resizeImageInput = source0;
    // double resizeImageWidth = 160.0;
    // double resizeImageHeight = 120.0;
    // int resizeImageInterpolation = Imgproc.INTER_CUBIC;
    // resizeImage(resizeImageInput, resizeImageWidth, resizeImageHeight,
    // resizeImageInterpolation, resizeImageOutput);
    resizeImageOutput = source0;

    // Step Blur0:
    Mat blurInput = resizeImageOutput;
    BlurType blurType = BlurType.get("Gaussian Blur");
    double blurRadius = 0.0;
    blur(blurInput, blurType, blurRadius, blurOutput);

    // Step HSV_Threshold0:
    Mat hsvThresholdInput = blurOutput;
    double[] hsvThresholdHue = { 42.89568345323741, 92.45733788395904 };
    double[] hsvThresholdSaturation = { 42.2903194042338, 255.0 };
    double[] hsvThresholdValue = { 116.95143884892084, 255.0 };
    hsvThreshold(hsvThresholdInput, hsvThresholdHue, hsvThresholdSaturation, hsvThresholdValue, hsvThresholdOutput);

    // Step Mask0:
    Mat maskInput = resizeImageOutput;
    Mat maskMask = hsvThresholdOutput;
    mask(maskInput, maskMask, maskOutput);

  }

  /**
   * This method is a generated getter for the output of a Resize_Image.
   * 
   * @return Mat output from Resize_Image.
   */
  public Mat resizeImageOutput() {
    return resizeImageOutput;
  }

  /**
   * This method is a generated getter for the output of a Blur.
   * 
   * @return Mat output from Blur.
   */
  public Mat blurOutput() {
    return blurOutput;
  }

  /**
   * This method is a generated getter for the output of a HSV_Threshold.
   * 
   * @return Mat output from HSV_Threshold.
   */
  public Mat hsvThresholdOutput() {
    return hsvThresholdOutput;
  }

  /**
   * This method is a generated getter for the output of a Mask.
   * 
   * @return Mat output from Mask.
   */
  public Mat maskOutput() {
    return maskOutput;
  }

  /**
   * Scales and image to an exact size.
   * 
   * @param input         The image on which to perform the Resize.
   * @param width         The width of the output in pixels.
   * @param height        The height of the output in pixels.
   * @param interpolation The type of interpolation.
   * @param output        The image in which to store the output.
   */
  private void resizeImage(Mat input, double width, double height,
      int interpolation, Mat output) {
    Imgproc.resize(input, output, new Size(width, height), 0.0, 0.0, interpolation);
  }

  /**
   * An indication of which type of filter to use for a blur.
   * Choices are BOX, GAUSSIAN, MEDIAN, and BILATERAL
   */
  enum BlurType {
    BOX("Box Blur"), GAUSSIAN("Gaussian Blur"), MEDIAN("Median Filter"),
    BILATERAL("Bilateral Filter");

    private final String label;

    BlurType(String label) {
      this.label = label;
    }

    public static BlurType get(String type) {
      if (BILATERAL.label.equals(type)) {
        return BILATERAL;
      } else if (GAUSSIAN.label.equals(type)) {
        return GAUSSIAN;
      } else if (MEDIAN.label.equals(type)) {
        return MEDIAN;
      } else {
        return BOX;
      }
    }

    @Override
    public String toString() {
      return this.label;
    }
  }

  /**
   * Softens an image using one of several filters.
   * 
   * @param input        The image on which to perform the blur.
   * @param type         The blurType to perform.
   * @param doubleRadius The radius for the blur.
   * @param output       The image in which to store the output.
   */
  private void blur(Mat input, BlurType type, double doubleRadius,
      Mat output) {
    int radius = (int) (doubleRadius + 0.5);
    int kernelSize;
    switch (type) {
      case BOX:
        kernelSize = 2 * radius + 1;
        Imgproc.blur(input, output, new Size(kernelSize, kernelSize));
        break;
      case GAUSSIAN:
        kernelSize = 6 * radius + 1;
        Imgproc.GaussianBlur(input, output, new Size(kernelSize, kernelSize), radius);
        break;
      case MEDIAN:
        kernelSize = 2 * radius + 1;
        Imgproc.medianBlur(input, output, kernelSize);
        break;
      case BILATERAL:
        Imgproc.bilateralFilter(input, output, -1, radius, radius);
        break;
    }
  }

  /**
   * Segment an image based on hue, saturation, and value ranges.
   *
   * @param input  The image on which to perform the HSL threshold.
   * @param hue    The min and max hue
   * @param sat    The min and max saturation
   * @param val    The min and max value
   * @param output The image in which to store the output.
   */
  private void hsvThreshold(Mat input, double[] hue, double[] sat, double[] val,
      Mat out) {
    Imgproc.cvtColor(input, out, Imgproc.COLOR_BGR2HSV);
    Core.inRange(out, new Scalar(hue[0], sat[0], val[0]),
        new Scalar(hue[1], sat[1], val[1]), out);
  }

  /**
   * Filter out an area of an image using a binary mask.
   * 
   * @param input  The image on which the mask filters.
   * @param mask   The binary image that is used to filter.
   * @param output The image in which to store the output.
   */
  private void mask(Mat input, Mat mask, Mat output) {
    mask.convertTo(mask, CvType.CV_8UC1);
    Core.bitwise_xor(output, output, output);
    input.copyTo(output, mask);
  }

}
